service: ssh-observatory

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.6
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: scans/create.create
    events:
      - http:
          path: scans
          method: post
          cors: true

  list:
    handler: scans/list.list
    events:
      - http:
          path: scans
          method: get
          cors: true

  get:
    handler: scans/get.get
    events:
      - http:
          path: scans/{id}
          method: get
          cors: true

# TODO: enabled DynamoDB streams so when we put_item on the create handler, it will trigger a
# stream handler, that will do the scan immediately (or within a quarter of a sec of create 
# being called, so no wasted polling to maintain, just happens)
#
# streamFunction:
#     handler: streamFunction.handler
#     events:
#       - stream: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/my_table/stream/2016-11-20T22:55:25.566

resources:
  Resources:
    ScansDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
